// Generated by CoffeeScript 1.9.1
var Reflect, camel_case, cough, handler, is_primitive, snake_case;

if (!(global.Proxy && typeof Proxy !== "undefined")) {
  throw new Error("Unsupported platform.");
}

Reflect = require("harmony-reflect");

camel_case = require("camel-case");

snake_case = require("snake-case");

is_primitive = require("is-primitive");

handler = {
  has: function(target, prop) {
    var camel, snake;
    camel = camel_case(prop);
    snake = snake_case(prop);
    if (Reflect.has(target, prop)) {
      return target[prop];
    }
    if (Reflect.has(target, camel)) {
      return target[camel];
    }
    if (Reflect.has(target, snake)) {
      return target[snake];
    }
    return false;
  },
  get: function(target, prop) {
    var camel, snake;
    camel = camel_case(prop);
    snake = snake_case(prop);
    if (Reflect.get(target, prop)) {
      return target[prop];
    }
    if (Reflect.get(target, camel)) {
      return target[camel];
    }
    if (Reflect.get(target, snake)) {
      return target[snake];
    }
  }
};

module.exports = cough = function(obj) {
  if (is_primitive(obj)) {
    throw new TypeError("cough doesn't accept primitive values");
  }
  return new Proxy(obj, handler);
};
